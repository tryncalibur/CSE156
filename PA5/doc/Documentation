# Trystan Nguyen trtanguy@ucsc.edu
# 1579170
# Programming Assignment 5: Simple chat

Server:
	Usage: ./server <listen-port>
	When server is executed, it will open a socket at port <listen-port> and with any address. When the server recieves a connection, it will do the following:
		1. Parse the first message into ID and IP. 
		2. Check to see if ID is already taken
			a. If ID is already taken, Server will send a message to Client indicating Error
			b. If ID is not taken, Server will send a message approving Client aand save ID/IP into a linked list. The Server will then Create a new thread to deal with incoming requests from that client.

	Client Handling Requests:
	When the new thread is created, the server will take in requests from the client and respond accordingly.
		1. "GetList\n\n"
			Server will look through the linked list of Clients and send a list of Clients waiting for connetions.
		2. "Waiting\n\n<Port>"
			Server will set client's status was waiting and set port, will be availible for GetList and connections.
		3. "END_Wait\n\n"
			Sever will set client's status to not waiting. 
		4. "ConnectTo\n\n<ID>"
			Server will find Client based on ID and send ID, IP, and Port if the Client of ID is waiting for connection. 
			If Client of ID is not waiting, return an error message.
		5. "Terminate\n\n"
			Server will terminiate connections with client and remove Client Data from Linked List


Client:
	Usage: ./client <IP> <Port> <ID>
	When client is executed, it will contact the server of IP and Port. It will send the Client's IP and ID. The Server will respond with either a confirm or deny. If the client is denied, then the client will terminate. Otherwise, the client will listen to commands on the command line.

	Commands:
		1. /list
			Requests List from Server and prints to Terminal
		2. /wait
			Sends "Waiting\n\n<Port>" to Server and awaits connection at specified port in Wait mode. When WAIT is ended from a connection made or forcibly quit, "END_Wait\n\n" is sent to the server. After a succesful connection, the first message recieved from new client is the ID of said Client. Then, The Client enters Chat mode. If WAIT was forcibly ended, the Client will return to INFO mode.
		3. /connect <ID>
			Sends "ConnectTo\n\n<ID>" to Server and recieves IP and Port back, which the Client connects to. After a successful Connection, The first message sent will be the ID of self. Then, The client enters chat mode.
			Connection fails if ID is not valid or is not waiting for a connection.
		4. /quit
			From any mode, client will end current command properly and send "Terminate\n\n" to server and end all connections. Then the client will end.
		5. ctrl + c: Return to INFO mode from Wait or Chat mode, properly closing connections when needed.


General Protocols:
	1. Client Server communications will always start with client sending a request and the Server responding with the data requested, each within one message. If the Request cannot be handled, the server will send a specific error message to client indicating that request cannot be finished.
	2. All Message to server concerning requests connecting will contain \n\n
	3. Message from server to client containing data will be formatted as needed
	4. The client will only be in one mode at a time. INFO will execute all commands while CHAT and WAIT will only expect /quit as a command and won't accept any other /<word> commands.  